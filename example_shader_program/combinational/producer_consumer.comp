#version 450
#pragma scheduler(OBE)
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_shader_subgroup_vote : enable
layout(local_size_x = 2) in;
layout(tla_subgroup_size = 2) in;
layout(tla_num_workgroups = 2) in;
layout(std430, binding = 0) buffer Msg {
    uint msg;
};

// this is a mutation of original producer consumer, the only change is the additional non-uniform subgroup operation inside the loop
void main() {
    uint gid = gl_GlobalInvocationID.x;
    bool done = false;

    do {
        if (!done) {
            if (gid == atomicLoad(msg, 4, 0, 0)) {
                done = true;
                atomicStore(msg, gid + 1, 4, 0, 0);
                // this one is interesting beacuse the active threads in this block are always {gid}
                subgroupAll(true);
            }
        }
    } while (!subgroupAll(done));
        if (gl_GlobalInvocationID.x == 0) {
        int i = 0;
        }
}