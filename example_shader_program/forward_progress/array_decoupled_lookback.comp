#version 450
#pragma scheduler(HSA)
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_shader_subgroup_vote : enable
layout(local_size_x = 2) in;
layout(tla_subgroup_size = 2) in;
layout(tla_num_workgroups = 2) in;

layout(std430, binding = 0) buffer Partition {
    uint part;
};

layout(std430, binding = 0) buffer Array {
    Array[];
};

shared uint workgroupPart;

// This requires OBE to terminate
void main() {
    // localIdx = local thread id
    uint localIdx = gl_LocalInvocationID.x;
    // increment the partition by 1 if the local thread id is 0
    // assign the old value of the partition to shared variable workgroupPart
    // each workgroup has a unique partition
    if (localIdx == 0){
        workgroupPart = atomicAdd(part, 1);
    }
    // barrier to guarantee that every thread in the workgroup to see the updated partition
    barrier();
    uint partIdx = workgroupPart;
    uint workgroupSize = gl_WorkGroupSize.x;

    // i \belong [0, partIdx)
    // as result from partition 0 is already inclusive, we don't need to lookback
    uint i = partIdx - 1;
    while (i >= 0){
        // local thread t with id = tid in partition p will look at the array at index i * workgroupSize + tid
        // so when workgroup size = 2, local thread with tid = 1 at partition 1 will look at the array at index i * 2 + 1, where i = [0, 1)
        uint payLoad = Array[i * workgroupSize + localIdx];
        // if we see result from previous partition i, we then decrement i to see if there is result from previous partition i - 1 in next loop
        if (payLoad == 1) {
            // do some works....
            i -= 1;
        }
    }

    // Store 1 to the array at index partIdx * workgroupSize + localIdx
    // so when workgroup size = 2, local thread with tid = 1 at partition 1 will Store 1 the array at index 1 * 2 + 1 = 3 to indicate we have result
    AtomicStore(Array[partIdx * workgroupSize + localIdx], 1);
}
